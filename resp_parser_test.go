package main

import (
	"encoding/hex"
	"fmt"
	"regexp"
	"testing"
)

var (
	_ = []struct {
		Payload string
		Cmd     string
		Args    string
	}{
		{"*2\r\n$3\r\nfoo\r\n$3\r\nbar\r\n", "foo", "bar"},
		{"*2\r\n$4\r\nping\r\n$2\r\nok", "ping", "ok"},
		{"*1\r\n$4\r\nping\r\n", "ping", ""},
		{"*3\r\n$5\r\nRPUSH\r\n$6\r\nmylist\r\n$3\r\none\r\n", "RPUSH", "mylist one"},
		{"*4\r\n$6\r\nLRANGE\r\n$6\r\nmylist\r\n$1\r\n0\r\n$3\r\n599\r\n", "LRANGE", "mylist 0 599"},
		{"*4\r\n$6\r\nLRANGE\r\n$6\r\nmylist\r\n$1\r\n2a340d0a24340d0a485345540d0a2435340d0a75736572733\r\n$3\r\n2a340d0a24340d0a485345540d0a2435340d0a75736572733XXXXXXX\r\n", "LRANGE", "mylist 2a340d0a24340d0a485345540d0a2435340d0a75736572733 2a340d0a24340d0a485345540d0a2435340d0a75736572733"},
	}

	testDataPayloads = []struct {
		Payload string
		Cmd     string
		Args    string
		Sep     []byte
		Cls     string
		Size    int
	}{
		{"*3\r\n$5\r\nRPUSH\r\n$6\r\nuser:slot:ghost:095b314d-8e62-4e6c-abd6-e8a826ace563:chess\r\n$3\r\none\r\n",
			"RPUSH",
			"user:slot:ghost",
			[]byte{':'},
			`[0-9a-fA-F]{8}\-[0-9a-fA-F]{4}\-[0-9a-fA-F]{4}\-[0-9a-fA-F]{4}\-[0-9a-fA-F]{12}`,
			100,
		}, {"*2\r\n$3\r\nGET\r\n$56\r\nusernamechangecount_747ca354-ba9c-4c90-8e05-9a0dfe4ff668",
			"GET",
			"usernamechangecount_",
			[]byte{':'},
			`[0-9a-fA-F]{8}\-[0-9a-fA-F]{4}\-[0-9a-fA-F]{4}\-[0-9a-fA-F]{4}\-[0-9a-fA-F]{12}`,
			100},
	}
)

func Test_Parse(t *testing.T) {
	for _, data := range testDataPayloads {
		cls := regexp.MustCompile(data.Cls)
		cmd, err := NewRespReader([]byte(data.Payload), data.Sep, cls, data.Size)
		if err != nil {
			t.Error(err)
		}

		if cmd.Command() != data.Cmd {
			t.Errorf("cmd error. expect: %s, got: %s", data.Cmd, cmd.Command())
		}

		if cmd.Args() != data.Args {
			t.Errorf("args error. expect: %s, got: %s", data.Args, cmd.Args())
		}
	}
}

func Test_ParseFomatKey(t *testing.T) {

	testDatas := []struct {
		Payload string
		Pattern string
		Sep     string
		Expect  string
	}{
		{"user:slot:ghost", "slot", ":", "user::ghost"},
		{"user:slot:095b314d-8e62-4e6c-abd6-e8a826ace563:spagetti", `[0-9a-fA-F]{8}\-[0-9a-fA-F]{4}\-[0-9a-fA-F]{4}\-[0-9a-fA-F]{4}\-[0-9a-fA-F]{12}`, ":", "user:slot::spagetti"},
	}

	for _, data := range testDatas {
		rsp := RespReader{payload: []byte(data.Payload)}
		pattern := regexp.MustCompile(data.Pattern)
		out := rsp.cleanMatched(rsp.payload, pattern, []byte(data.Sep))
		outstr := string(out)
		if outstr != data.Expect {
			t.Errorf("clean error expect: %s, got: %s", data.Expect, outstr)
		}
	}
}

func Test_EmptryArgs(t *testing.T) {
	//b, _ := hex.DecodeString("2a320d0a24330d0a4745540d0a2435360d0a757365726e616d656368616e6765636f756e745f37343763613335342d626139632d346339302d386530352d3961306466653466663636380d0a")
	//b, _ := hex.DecodeString("6372656174655f6174223a302c22636f756e74223a33307d2c227061796572223a66616c73652c22706f696e7473223a3139332c22706f696e745f706f736974697665223a3135322c2272616e6b6564223a32312c2272616e6b223a32312c226973426f74223a747275652c22616d6f756e74223a302c2273616c6573223a302c2277696e223a312c226c6f7365223a302c2264726177223a302c2261766172616765223a302c22746f74616c223a312c226c6173745f6d617463685f74696d65223a313631303032353034382c22636f756e747279223a224445222c22656c6f223a302c22736561736f6e5f656c6f223a302c22736d70223a302c22637570223a302c22636f6c6c6563746564223a66616c73652c22726577617264223a7b2274797065223a22222c2276616c7565223a302c22636f756e74223a307d2c2272657761726473223a5b5d2c2275736572223a7b226964223a22313233222c22636f756e747279223a224445222c22757365726e616d65223a226b656e647269636b222c226a6f696e74696d65223a313631303032353034382c226d656d62657273696e6365223a312c227465616d5f6261646765223a322c227465616d5f6261636b67726f756e64223a337d2c22706572736f6e615f74797065223a342c2273746172745f706f696e74223a3135327d2c7b22757365726964223a22222c2267726f7570223a7b2267726f75706964223a22222c226469766973696f6e223a372c226372656174655f6174223a302c22636f756e74223a33307d2c227061796572223a66616c73652c22706f696e7473223a3139332c22706f696e745f706f736974697665223a3135312c2272616e6b6564223a32322c2272616e6b223a32322c226973426f74223a747275652c22616d6f756e74223a302c2273616c6573223a302c2277696e223a312c226c6f7365223a302c2264726177223a302c2261766172616765223a302c22746f74616c223a312c226c6173745f6d617463685f74696d65223a313631303032353034382c22636f756e747279223a225452222c22656c6f223a302c22736561736f6e5f656c6f223a302c22736d70223a302c22637570223a302c22636f6c6c6563746564223a66616c73652c22726577617264223a7b2274797065223a22222c2276616c7565223a302c22636f756e74223a307d2c2272657761726473223a5b5d2c2275736572223a7b226964223a22313233222c22636f756e747279223a225452222c22757365726e616d65223a226d616c6c6f72796678222c226a6f696e74696d65223a313631303032353034382c226d656d62657273696e6365223a312c227465616d5f6261646765223a322c227465616d5f6261636b67726f756e64223a357d2c22706572736f6e615f74797065223a342c2273746172745f706f696e74223a3135317d2c7b22757365726964223a22222c2267726f7570223a7b2267726f75706964223a22222c226469766973696f6e223a372c226372656174655f6174223a302c22636f756e74223a33307d2c227061796572223a66616c73652c22706f696e7473223a3139302c22706f696e745f706f736974697665223a3134352c2272616e6b6564223a32332c2272616e6b223a32332c226973426f74223a747275652c22616d6f756e74223a302c2273616c6573223a302c2277696e223a312c226c6f7365223a302c2264726177223a302c2261766172616765223a302c22746f74616c223a312c226c6173745f6d617463685f74696d65223a313631303032353034382c22636f756e747279223a224e4c222c22656c6f223a302c22736561736f6e5f656c6f223a302c22736d70223a302c22637570223a302c22636f6c6c6563746564223a66616c73652c22726577617264223a7b2274797065223a22222c2276616c7565223a302c22636f756e74223a307d2c2272657761726473223a5b5d2c2275736572223a7b226964223a22313233222c2263")
	b, _ := hex.DecodeString("4445222c22656c6f223a302c22736561736f6e5f656c6f223a302c22736d70223a302c22637570223a302c22636f6c6c6563746564223a66616c73652c22726577617264223a7b2274797065223a22222c2276616c7565223a302c22636f756e74223a307d2c2272657761726473223a5b5d2c2275736572223a7b226964223a22313233222c22636f756e747279223a224445222c22757365726e616d65223a2262617563687979222c226a6f696e74696d65223a313631303032353034382c226d656d62657273696e6365223a312c227465616d5f6261646765223a332c227465616d5f6261636b67726f756e64223a327d2c22706572736f6e615f74797065223a322c2273746172745f706f696e74223a3330307d2c7b22757365726964223a22222c2267726f7570223a7b2267726f75706964223a22222c226469766973696f6e223a372c226372656174655f6174223a302c22636f756e74223a33307d2c227061796572223a66616c73652c22706f696e7473223a3337352c22706f696e745f706f736974697665223a3239342c2272616e6b6564223a342c2272616e6b223a342c226973426f74223a747275652c22616d6f756e74223a302c2273616c6573223a302c2277696e223a312c226c6f7365223a302c2264726177223a302c2261766172616765223a302c22746f74616c223a312c226c6173745f6d617463685f74696d65223a313631303032353034382c22636f756e747279223a224553222c22656c6f223a302c22736561736f6e5f656c6f223a302c22736d70223a302c22637570223a302c22636f6c6c6563746564223a66616c73652c22726577617264223a7b2274797065223a22222c2276616c7565223a302c22636f756e74223a307d2c2272657761726473223a5b5d2c2275736572223a7b226964223a22313233222c22636f756e747279223a224553222c22757365726e616d65223a226d61726a6f6c61696e65222c226a6f696e74696d65223a313631303032353034382c226d656d62657273696e6365223a312c227465616d5f6261646765223a312c227465616d5f6261636b67726f756e64223a347d2c22706572736f6e615f74797065223a322c2273746172745f706f696e74223a3239347d2c7b22757365726964223a22222c2267726f7570223a7b2267726f75706964223a22222c226469766973696f6e223a372c226372656174655f6174223a302c22636f756e74223a33307d2c227061796572223a66616c73652c22706f696e7473223a3335372c22706f696e745f706f736974697665223a3237362c2272616e6b6564223a352c2272616e6b223a352c226973426f74223a747275652c22616d6f756e74223a302c2273616c6573223a302c2277696e223a312c226c6f7365223a302c2264726177223a302c2261766172616765223a302c22746f74616c223a312c226c6173745f6d617463685f74696d65223a313631303032353034382c22636f756e747279223a225452222c22656c6f223a302c22736561736f6e5f656c6f223a302c22736d70223a302c22637570223a302c22636f6c6c6563746564223a66616c73652c22726577617264223a7b2274797065223a22222c2276616c7565223a302c22636f756e74223a307d2c2272657761726473223a5b5d2c2275736572223a7b226964223a22313233222c22636f756e747279223a225452222c22757365726e616d65223a22747261766973222c226a6f696e74696d65223a313631303032353034382c226d656d62657273696e6365223a312c227465616d5f6261646765223a342c227465616d5f6261636b67726f756e64223a337d2c22706572736f6e615f74797065223a322c2273746172745f706f696e74223a3237367d2c7b22757365726964223a22222c2267726f7570223a7b2267726f75706964223a22222c226469766973696f6e223a372c226372656174655f6174223a302c22636f756e74223a33307d2c22706179")
	fmt.Printf("%s\r\n", string(b))
}

func Benchmark_ParseWithEmptyOptions(b *testing.B) {
	for i := 0; i < b.N; i++ {
		_, _ = NewRespReader([]byte("*4\r\n\r\n$6\r\nLRANGE\r\n$6\r\nmylist\r\n$1\r\n0\r\n$3\r\n599\r\n"), []byte{}, nil, -1)
	}
}

func Benchmark_ParseWithOptions(b *testing.B) {
	pattern := regexp.MustCompile(`\d...`)
	sep := []byte{':'}
	for i := 0; i < b.N; i++ {
		_, _ = NewRespReader([]byte("*4\r\n\r\n$6\r\nLRANGE\r\n$6\r\na:b:5000:dxxxxxxxxxxxxxxxxxxxx\r\n$1\r\n0\r\n$3\r\n599\r\n"),
			sep,
			pattern,
			20)
	}
}
